@page "/game"
@rendermode InteractiveServer
@using KingOfTheHill
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using static KingOfTheHill.IGameProvider
@inject NavigationManager NavigationManager


<div class="lobby__container">
    <div class="input__block">
        <input disabled=@(_currentGame is not null) placeholder="Введите Ваш никнейм" @bind="@Username"/>
    </div>

    <div class="lobbies">
        <div class="lobbies__title">
            <h1>Список Лобби</h1>
        </div>
        <div class="lobbies__list">
            @if (Lobbies != null)
            {
                <div class="list__lobby">
                @foreach (var (item, i) in Lobbies.Select((value, index) => (value, index)))
                {
                        <div>
                            <p>@(i + 1)</p>
                            <p>@(item.Value.Players.Count)/4</p>
                            <p>@item.Value.isStarted</p>
                            <button disabled=@(string.IsNullOrWhiteSpace(Username) || _currentGame is not null) @onclick="@(() => JoinLobby(item.Value.GameID))">Подключиться</button>
                        </div>
                }
                </div>
            }
            <div class="button__lobby">
                <button disabled=@(string.IsNullOrWhiteSpace(Username)) class="list__createButton" @onclick="@(() => CreateLobby())">Создать лобби</button>
                <button class="list__refreshButton" @onclick="@(() => RefreshLobbies())">Обновить список лобби</button>
            </div>
            @if (_isLobbyVisible)
            {
                <div class="lobby__menu">
                    @for (int i = 0; i < _currentGame!.Players.Count; i++)
                    {
                        <div>
                            <p>@(i + 1)</p>
                            <p>
                                @_currentGame!.Players[@i].Name;
                            </p>
                        </div>
                    }
                </div>
                //TODO список игроков
                <div class="menu__timer @(_isTimerVisible ? "visible": "hidden")">@displayTime</div>
            }
        </div>
    </div>
</div>



@code
{
    private string? Username;
    private Dictionary<Guid, Game>? Lobbies; // Через Dictionary надо сделать и при изменении игры или чего то еще
    //в методах _hubConnection.On... перезаписывать ее по айдишнику
    private HubConnection? _hubConnection;
    private bool _isLobbyVisible = false;
    private bool _isTimerVisible = false;
    private Game? _currentGame;

    private int secondsRemaining = 60;
    private bool isRunning = false;
    private Timer? timer;
    private string displayTime => $"{secondsRemaining / 60}:{secondsRemaining % 60:D2}";

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .AddNewtonsoftJsonProtocol(options =>
            {
                options.PayloadSerializerSettings = new JsonSerializerSettings
                {
                    // Настройки сериализации Newtonsoft.Json
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    TypeNameHandling = TypeNameHandling.Auto, // Для поддержки полиморфизма
                    ContractResolver = new DefaultContractResolver
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    }
                };
            })
            .Build();

        _hubConnection.Closed += async (error) =>
        {
            await Task.Delay(1000);
            await _hubConnection.StartAsync();
        };

        try
        {
            Console.WriteLine("Aboba");
            await _hubConnection.StartAsync();
        }
        catch (Exception)
        {

        }

        _hubConnection.On<Game>("JoinGameLobby", (game) =>
        {
            _isLobbyVisible = true;
            _currentGame = game;
            Console.WriteLine(_currentGame.Players.Count);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Game>("GameCreated", (game) =>
        {
            Lobbies?.Add(game.GameID, game);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("TimerWasStarted", () =>
        {
            _isTimerVisible = true;
            StartTimer();
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("TimerWasCancelled", () => {
            _isTimerVisible = false;
            ResetTimer();
        });

        _hubConnection.On("StartGame", () =>
        {
            Console.WriteLine("ABOBA PISI SISKI");
            // текущи блок, то есть весь компонент Play делается невидимым
        });

        _hubConnection.On<Dictionary<Guid, Game>>("RefreshGamesList", (Dictionary<Guid, Game> _games) =>
        {
            // когда сделаешь игры словарем
            Lobbies = _games;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task RefreshLobbies()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("GetActiveGames");
        } catch (Exception ex)
        {

        }
    }

    private async Task JoinLobby(Guid gameId)
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("JoinGameAsync", Username, gameId);
        }
        catch (Exception ex)
        {
            // ?
        }
    }

    private async Task CreateLobby()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("CreateGameAsync", Username);
        }
        catch (Exception ex)
        {
        }
    }

    private void StartTimer()
    {
        if (isRunning) ResetTimer();
        isRunning = true;
        timer = new Timer(TimerCallback, null, 1000, 1000);
    }

    private void TimerCallback(object? state)
    {
        if (_currentGame.Players.Count < 2) return;
        if (secondsRemaining > 0)
        {
            secondsRemaining--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            TimerCompleted();
        }
    }

    private void TimerCompleted()
    {
        timer?.Dispose();
        isRunning = false;
        _hubConnection.SendAsync("StartGameAsync", _currentGame!.GameID);
        InvokeAsync(StateHasChanged);
    }

    private void ResetTimer()
    {
        timer?.Dispose();
        secondsRemaining = 60;
        isRunning = false;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    public void CancelTimer()
    {
        ResetTimer();
        InvokeAsync(StateHasChanged);
        _isTimerVisible = false;
    }
}
