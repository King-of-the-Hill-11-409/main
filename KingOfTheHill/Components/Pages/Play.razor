@page "/game"
@rendermode InteractiveServer
@using KingOfTheHill
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using static KingOfTheHill.IGameProvider
@inject NavigationManager NavigationManager

<div>
    <h1>Введите ваше имя:</h1>
    <input @bind="@Username"/>
</div>

<div class="lobbies">
    <div class="lobbies__container"></div>
    <div class="lobbies__title">
        <h1>Список Лобби</h1>
    </div>
    <div class="lobbies__list">
        @if (Lobbies != null)
        {
            @foreach (var (item, i) in Lobbies.Select((value, index) => (value, index)))
            {
                <div class="list__lobby">
                    <span>
                        <span>@(i + 1)</span>
                        <span>@(item.Value.Players.Count)/4</span>
                        <span>@item.Value.isStarted</span>
                    </span>
                    <button @onclick="@(() => JoinLobby(item.Value.GameID))">Подключиться</button>
                    @* <div class="lobby__title">
                        <p>@i</p>
                    </div>
                    <div class="lobby__players">
                        <p>@(item.Value.Players.Count)/4</p>
                    </div>
                    <div class="lobby__state">
                        <p>@item.Value.isStarted</p>
                    </div> *@
                </div>
            }
        }
        <button class="list__createButton" @onclick="@(() => CreateLobby())">Создать лобби</button>
        <button class="list__refreshButton" @onclick="@(() => RefreshLobbies())">Обновить список лобби</button>
        @if (_isLobbyVisible)
        {
            <div class="lobby__menu">
                @for (int i = 0; i < _currentGame?.Players?.Count; i++)
                {
                    <div>
                        <p>
                            @_currentGame!.Players[@i].Name;
                        </p>
                    </div>
                }
            </div>
            //TODO список игроков
            <button @onclick="@(() => LeaveLobby())">Выйти из игры</button>
            <div class="menu__timer @(_isTimerVisible ? "visible": "hidden")">@displayTime</div>
        }
    </div>
</div>


@code
{
    private string? Username;
    private Dictionary<Guid, Game>? Lobbies; // Через Dictionary надо сделать и при изменении игры или чего то еще
    //в методах _hubConnection.On... перезаписывать ее по айдишнику
    private HubConnection? _hubConnection;
    private bool _isLobbyVisible = false;
    private bool _isTimerVisible = false;
    private Game? _currentGame;

    private int secondsRemaining = 60;
    private bool isRunning = false;
    private Timer? timer;
    private int displayTime = 60;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .AddNewtonsoftJsonProtocol(options =>
            {
                options.PayloadSerializerSettings = new JsonSerializerSettings
                {
                    // Настройки сериализации Newtonsoft.Json
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    TypeNameHandling = TypeNameHandling.Auto, // Для поддержки полиморфизма
                    ContractResolver = new DefaultContractResolver
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    }
                };
            })
            .Build();

        try
        {
            Console.WriteLine("Aboba");
            await _hubConnection.StartAsync();
        }
        catch (Exception)
        {

        }

        _hubConnection.On<Game>("JoinGameLobby", (game) =>
        {
            _isLobbyVisible = true;
            _currentGame = game;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Game>("GameCreated", (game) =>
        {
            Lobbies?.Add(game.GameID, game);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("UpdateTimer", (seconds) =>
        {
            _isTimerVisible = true;
            displayTime = seconds;
            InvokeAsync(StateHasChanged);

        });

        _hubConnection.On("TimerWasStarted", () =>
        {
            _isTimerVisible = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("TimerWasStopped", () =>
        {
            _isTimerVisible = false;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("StartGame", () =>
        {
            //
        });

        _hubConnection.On<Dictionary<Guid, Game>>("RefreshGamesList", (Dictionary<Guid, Game> _games) =>
        {
            // когда сделаешь игры словарем
            Lobbies = _games;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task RefreshLobbies()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("GetActiveGames");
        } catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on RefreshLobbies", ex);
        }
    }

    private async Task JoinLobby(Guid gameId)
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("JoinGameAsync", Username, gameId);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on JoinLobby", ex);
        }
    }

    private async Task CreateLobby()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("CreateGameAsync", Username);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on CreateLobby", ex);
        }
    }

    private async Task LeaveLobby()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("LeaveGameAsync", _currentGame.GameID);
        }

        catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on LeaveLobby", ex);
        }
    }
}
