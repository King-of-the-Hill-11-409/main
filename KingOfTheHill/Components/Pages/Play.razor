@page "/game"
@rendermode InteractiveServer
@using KingOfTheHill
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using static KingOfTheHill.IGameProvider
@inject NavigationManager NavigationManager

@if (_currentGame is not null && _currentGame.isStarted)
{
<div class="game__container">
    <div class="top__players">
        @foreach (var player in _currentGame.Players)
        {
            @if (player.Id != _currentGame.CurrentPlayer)
            {
                <div class="player__block">
                    <h4 class="player__name">@player.Name</h4>
                    <div class="player__avatar">üë®üèø‚Äçü¶Ω</div>
                    <div class="player__cards">
                        @foreach (var card in player.Deck)
                        {
                            <div class="card__back">
                                <img src="images/BackSide.png"/>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>

    <div class="player__hand">
        @foreach (var card in _currentPlayer!.Deck)
        {
            @if (card is PositiveCard pCard)
            {
                <div class="hand__card">
                    <img src="images/Positive_@(pCard.Value).png"/>
                </div>
            } else if (card is NegativeCard nCard)
            {
                <div class="hand__card">
                    <img src="images/Negative_@(nCard.Value).png"/>
                </div>
            } else if (card is SpecialCard sCard)
            {
                @if (sCard.Value == SpecialCommand.Silence)
                {
                    <div class="hand__card">
                        <img src="images/Block.png"/>
                    </div>
                } else if (sCard.Value == SpecialCommand.ChangeMove)
                {
                    <div class="hand__card">
                        <img src="images/Reverse.png"/>
                    </div>
                }
            }
        }
    </div>
    <div class="bottom__panel">
        <div class="haveCombo__panel">–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–º–±–æ: @(_currentPlayer.HasCombo ? "–î–∞!" : "–ù–µ—Çüò¢")</div>

        <div class="score__panel">
            <p>–í–∞—à —Å—á—ë—Ç: <span>@_currentPlayer.Score</span></p>
        </div>
    </div>
</div>
} else
{
    @if (_isLobbyVisible)
    {
        <div class="overlay"></div>
    }

    <div class="lobby__container">
        <div class="input__block">
            <input disabled=@(_currentGame is not null) placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º" @bind="@Username"/>
        </div>

        <div class="lobbies">
            <div class="lobbies__title">
                <h1>–°–ø–∏—Å–æ–∫ –õ–æ–±–±–∏</h1>
            </div>
            <div class="lobbies__list">
                @if (Lobbies.Count != 0)
                {
                    <div class="list__lobby">
                    @foreach (var (item, i) in Lobbies.Select((value, index) => (value, index)))
                    {
                            <div @key="item.Key">
                                <p>@(i + 1)</p>
                                <p>@(item.Value.Players.Count)/4</p>
                                <p>@item.Value.isStarted</p>
                                <button disabled=@(string.IsNullOrWhiteSpace(Username) || _currentGame is not null || item.Value.Players.Count == 4) @onclick="@(() => JoinLobby(item.Value.GameID))">–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button>
                            </div>
                    }
                    </div>
                }
                <div class="button__lobby">
                    <button disabled=@(string.IsNullOrWhiteSpace(Username)) class="list__createButton" @onclick="@(() => CreateLobby())">–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏</button>
                    <button class="list__refreshButton" @onclick="@(() => RefreshLobbies())">–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏</button>
                </div>
            @if (_isLobbyVisible)
            {
                <div class="list__menu">
                    <div class="players__list">
                        @for (int i = 0; i < _currentGame!.Players.Count; i++)
                        {
                            <div>
                                <p>@(i + 1)</p>
                                <p>
                                    @_currentGame!.Players[@i].Name;
                                </p>
                            </div>
                        }
                    </div>
                    <div class="menu__other">
                        <div class="menu__timer @(_isTimerVisible ? "visible": "hidden")">@displayTime</div>
                        <button @onclick="@(() => LeaveLobby())">–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã</button>
                    </div>
                </div>
            }
            </div>
        </div>
    </div>
}



@code
{
    private string? Username;
    private Dictionary<Guid, Game> Lobbies = [];
    private HubConnection? _hubConnection;
    private bool _isLobbyVisible = false;
    private bool _isTimerVisible = false;
    private Game? _currentGame;
    private int displayTime = 60;
    private Guid? _currentPlayerId;
    private Player? _currentPlayer;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .AddNewtonsoftJsonProtocol(options =>
            {
                options.PayloadSerializerSettings = new JsonSerializerSettings
                {
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Newtonsoft.Json
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    TypeNameHandling = TypeNameHandling.Auto, // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞
                    ContractResolver = new DefaultContractResolver
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    }
                };
            })
            .Build();


        try
        {
            Console.WriteLine("Aboba");
            await _hubConnection.StartAsync();
        }
        catch (Exception)
        {

        }

        _hubConnection.On<Game>("JoinGameLobby", (game) =>
        {
            _isLobbyVisible = true;
            _currentGame = game;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Game>("GameCreated", (game) =>
        {
            Lobbies?.Add(game.GameID, game);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("UpdateTimer", (seconds) =>
        {
            _isTimerVisible = true;
            displayTime = seconds;
            InvokeAsync(StateHasChanged);

        });

        _hubConnection.On("TimerWasStarted", () =>
        {
            _isTimerVisible = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("TimerWasStopped", () =>
        {
            displayTime = 60;
            _isTimerVisible = false;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Game>("StartGame", (game) =>
        {
            _currentGame = game;
            _currentPlayer = _currentGame.Players.Find(p => p.Id == _currentPlayerId);
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Dictionary<Guid, Game>>("RefreshGamesList", (Dictionary<Guid, Game> _games) =>
        {
            Lobbies = _games;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Guid, Game>("RenderAfterJoinUser", (gameId, game) => 
        {
            Lobbies[gameId] = game;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("ToMainPage", () => 
        {
            _isLobbyVisible = false;
            _currentGame = null;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Game>("UpdateAfterLeave", game =>
        {
            _currentGame = game;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Guid>("DeleteGameFromLobby", gameId =>
        {
            Lobbies?.Remove(gameId);
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task RefreshLobbies()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("GetActiveGames");
        } catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on RefreshLobbies", ex);
        }
    }

    private async Task JoinLobby(Guid gameId)
    {
        if (_hubConnection is null) return;

        _currentPlayerId = Guid.NewGuid();

        try
        {
            await _hubConnection.SendAsync("JoinGameAsync", _currentPlayerId, Username, gameId);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on JoinLobby", ex);
        }
    }

    private async Task CreateLobby()
    {
        if (_hubConnection is null) return;

        _currentPlayerId = Guid.NewGuid();

        try
        {
            await _hubConnection.SendAsync("CreateGameAsync", _currentPlayerId, Username);
        }
        catch (Exception ex)
        {
        }
    }


    private async Task LeaveLobby()
    {
        if (_hubConnection is null) return;

        try
        {
            await _hubConnection.SendAsync("LeaveGameAsync", _currentGame.GameID);
        }

        catch (Exception ex)
        {
            Console.WriteLine("Exeption on client side on LeaveLobby", ex);
        }
    }

    @* private async Task  *@
}